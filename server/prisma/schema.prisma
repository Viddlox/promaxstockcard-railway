// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UoM {
  PCS
  PACK
  UNIT
}

enum PaymentMethod {
  COD
  TRANSFER
}

enum OrderType {
  STOCK
  SALE
}

enum SetType {
  ABC
  A
  C
}

model Products {
  productId   String   @id
  productName String   @unique
  basePrice   Decimal
  quantity    Int
  bom         Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@unique([updatedAt, productId])
}

model Inventory {
  partId       String   @id
  partName     String
  partPrice    Decimal
  partQuantity Int
  partUoM      UoM
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@unique([updatedAt, partId])
}

model Users {
  userId    String   @id @default(uuid())
  username  String   @unique
  password  String
  role      String
  email     String?
  orders    Orders[]
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([username])
}

model Customers {
  customerId  String   @id @default(uuid())
  companyName String
  address     String
  phoneNumber String
  ssmNumber   String
  postCode    String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  orders Orders[]

  @@unique([updatedAt, customerId])
}

model Orders {
  orderId       String         @id @default(uuid())
  orderType     OrderType
  orderItems    Json
  agentId       String
  customerId    String?
  paymentMethod PaymentMethod?
  totalAmount   Decimal?
  setType       SetType?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  customer Customers? @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  agent    Users      @relation(fields: [agentId], references: [userId], onDelete: Cascade)

  @@unique([updatedAt, orderId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  COD
  TRANSFER
}

enum OrderType {
  STOCK
  SALE
}

enum Role {
  OWNER
  ADMIN
  SALES
  STORE
}

enum NotificationType {
  LOW_STOCK
  ORDER_SALE
  ORDER_STOCK
  ORDER_DELETE
  INVENTORY_CREATE
  INVENTORY_UPDATE
  INVENTORY_DELETE
  PRODUCT_CREATE
  PRODUCT_UPDATE
  PRODUCT_DELETE
}

model Products {
  productId        String   @id
  productName      String   @unique
  basePrice        Decimal
  quantity         Int      @default(0)
  bom              Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  orderRedirectUrl String?
  reorderPoint     Int      @default(50)

  notifications Notifications[]

  @@unique([updatedAt, productId])
}

model Inventory {
  partId           String   @id
  partName         String
  partPrice        Decimal
  partQuantity     Int      @default(0)
  partUoM          String   @default("UNIT")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  orderRedirectUrl String?
  reorderPoint     Int      @default(50)

  notifications Notifications[]

  @@unique([updatedAt, partId])
}

model Users {
  userId        String   @id @default(uuid())
  username      String   @unique
  password      String
  role          Role     @default(STORE)
  email         String?
  orders        Orders[]
  fullName      String
  refreshTokens String[] @default([]) // Changed from Json? to String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  notifications Notifications[]

  @@index([username])
}

model Customers {
  customerId  String   @id @default(uuid())
  companyName String
  address     String
  phoneNumber String
  ssmNumber   String
  postCode    String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  orders Orders[]

  @@unique([updatedAt, customerId])
}

model Orders {
  orderId        String         @id @default(uuid())
  orderType      OrderType
  orderItems     Json
  salesAgentId   String
  salesAgentName String         @default("N/A")
  customerId     String?
  customerName   String         @default("N/A")
  paymentMethod  PaymentMethod?
  totalAmount    Decimal?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  modifications  Json?          @default("[]")

  customer   Customers? @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
  salesAgent Users      @relation(fields: [salesAgentId], references: [userId], onDelete: Cascade)

  notifications Notifications[]

  @@unique([updatedAt, orderId])
}

model Notifications {
  notificationId String           @id @default(uuid())
  receiverId     String
  type           NotificationType
  title          String
  content        String
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  // Nullable foreign keys to different tables
  orderId   String?
  productId String?
  partId    String?

  receiver Users      @relation(fields: [receiverId], references: [userId], onDelete: Cascade)
  order    Orders?    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product  Products?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  part     Inventory? @relation(fields: [partId], references: [partId], onDelete: Cascade)

  @@unique([createdAt, notificationId])
}
